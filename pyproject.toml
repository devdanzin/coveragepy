# Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0
# For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

## MYPY

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

exclude = """(?x)(
    ^tests/.*_plugin\\.py$           # not part of our test suite.
    )"""

## PYLINT

[tool.pylint.basic]
no-docstring-rgx = "__.*__|test[A-Z_].*|setUp|_decorator|_wrapper|_.*__.*"

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
    "__post_init__",
    "setUp",
    "reset",
    "_reset",
]

[tool.pylint.design]
max-args = 15
max-attributes = 40
max-bool-expr = 5
max-branches = 50
max-locals = 50
max-parents = 12
max-public-methods = 500
max-returns = 20
max-statements = 150
min-public-methods = 0

[tool.pylint.main]
extension-pkg-whitelist = ["greenlet"]

[tool.pylint."messages control"]
enable = [
    "useless-suppression",
]

disable = [
    "spelling",
    # Messages that are just silly:
    "locally-disabled",
    "exec-used",
    "global-statement",
    "broad-except",
    "no-else-return",
    "subprocess-run-check",
    "use-dict-literal",
    # Messages that may be silly:
    "no-member",
    "using-constant-test",
    "too-many-nested-blocks",
    "too-many-ancestors",
    "unnecessary-pass",
    "no-else-break",
    "no-else-continue",
    # Questionable things, but it's ok, I don't need to be told:
    "import-outside-toplevel",
    "self-assigning-variable",
    "consider-using-with",
    "missing-timeout",
    "too-many-lines",
    "use-implicit-booleaness-not-comparison",
    # Formatting stuff
    "superfluous-parens",
    # Messages that are noisy for now, eventually maybe we'll turn them on:
    "invalid-name",
    "protected-access",
    "unspecified-encoding",
    "consider-using-f-string",
    "duplicate-code",
    "cyclic-import",
]

[tool.pylint.reports]
score = false

[tool.pylint.variables]
dummy-variables-rgx = "_|unused|.*_unused"
ignored-argument-names = "_|unused|.*_unused"

## PYTEST

[tool.pytest.ini_options]
addopts = "-q -n auto -p no:legacypath --strict-markers --no-flaky-report -rfEX --failed-first"
python_classes = "*Test"
markers = [
    "expensive: too slow to run during \"make smoke\"",
]

# How come these warnings are suppressed successfully here, but not in conftest.py??
filterwarnings = [
    # Sample 'ignore':
    #"ignore:the imp module is deprecated in favour of importlib:DeprecationWarning",

    ## Pytest warns if it can't collect things that seem to be tests. This should be an error.
    "error::pytest.PytestCollectionWarning",
]

# xfail tests that pass should fail the test suite
xfail_strict = true

# https://docs.pytest.org/en/stable/reference/reference.html#confval-verbosity_assertions
verbosity_assertions = 5

balanced_clumps = [
    # Because of expensive session-scoped fixture:
    "VirtualenvTest",
    # Because of shared-file manipulations (~/tests/actual/testing):
    "CompareTest",
    # No idea why this one fails if run on separate workers:
    "GetZipBytesTest",
]

## RUFF
# We aren't using ruff for real yet...

[tool.ruff]
target-version = "py38"     # Can't use [project]
line-length = 130

[tool.ruff.pylint]
max-args = 15
#max-attributes = 40
max-bool-expr = 5
max-branches = 50
max-locals = 50
#max-parents = 12
max-public-methods = 500
max-returns = 20
max-statements = 150
#min-public-methods = 0

[tool.ruff.lint]
select = ["ALL"]
dummy-variable-rgx = "_|unused|.*_unused"

extend-select = [
  "D419",  # empty-docstring
  "E501",  # line-too-long
  "W291",  # trailing-whitespace
  "PLC0414",  # useless-import-alias
  "PLC2401",  # non-ascii-name
#  "PLC2801",  # unnecessary-dunder-call
  "PLC3002",  # unnecessary-direct-lambda-call
  "E999",  # syntax-error
  "PLE0101",  # return-in-init
  "F706",  # return-outside-function
  "F704",  # yield-outside-function
  "PLE0116",  # continue-in-finally
  "PLE0117",  # nonlocal-without-binding
  "PLE0241",  # duplicate-bases
  "PLE0302",  # unexpected-special-method-signature
  "PLE0604",  # invalid-all-object
  "PLE0605",  # invalid-all-format
  "PLE0704",  # misplaced-bare-raise
  "PLE1142",  # await-outside-async
  "PLE1205",  # logging-too-many-args
  "PLE1206",  # logging-too-few-args
  "PLE1307",  # bad-string-format-type
  "PLE1310",  # bad-str-strip-call
  "PLE1507",  # invalid-envvar-value
  "PLE2502",  # bidirectional-unicode
  "PLE2510",  # invalid-character-backspace
  "PLE2512",  # invalid-character-sub
  "PLE2513",  # invalid-character-esc
  "PLE2514",  # invalid-character-nul
  "PLE2515",  # invalid-character-zero-width-space
  "PLR0124",  # comparison-with-itself
  "PLR0202",  # no-classmethod-decorator
  "PLR0203",  # no-staticmethod-decorator
  "UP004",  # useless-object-inheritance
  "PLR0206",  # property-with-parameters
  "PLR0904",  # too-many-public-methods
  "PLR0911",  # too-many-return-statements
  "PLR0912",  # too-many-branches
  "PLR0913",  # too-many-arguments
  "PLR0914",  # too-many-locals
  "PLR0915",  # too-many-statements
  "PLR0916",  # too-many-boolean-expressions
  "PLR0917",  # too-many-positional
  "PLR1704",  # redefined-argument-from-local
  "PLR1711",  # useless-return
  "C416",  # unnecessary-comprehension
  "PLR1733",  # unnecessary-dict-index-lookup
  "PLR1736",  # unnecessary-list-index-lookup
  "PLW0108",  # unnecessary-lambda
  "PLW0120",  # useless-else-on-loop
  "PLW0129",  # assert-on-string-literal
  "B033",  # duplicate-value
  "PLW0131",  # named-expr-without-context
  "PLW0245",  # super-without-brackets
  "PLW0406",  # import-self
  "PLW0602",  # global-variable-not-assigned
  "PLW0604",  # global-at-module-level
  "F401",  # unused-import
  "F841",  # unused-variable
  "E722",  # bare-except
  "PLW0711",  # binary-op-exception
  "PLW1501",  # bad-open-mode
  "PLW1508",  # invalid-envvar-default
  "PLW1509",  # subprocess-popen-preexec-fn
  "PLW2101",  # useless-with-lock
  "PLW3301",  # nested-min-max
]

ignore = [
  "ANN101",   # Missing type annotation for `self` in method
  "ERA001",   # Found commented-out code
  "PLW0127",  # self-assigning-variable
  "PLW0603",  # global-statement
  "PLW1514",  # unspecified-encoding
  "E741",     # Ambiguous variable name
  "TRY003",   # Long messages outside the exception class
  "SLF001",   # Private member accessed
  "EM102",    # Exception must not use an f-string
  "RET505",   # Unnecessary `elif` after `return`
  "PTH123",   # `open()` should be replaced by `Path.open()`
  "PIE790",   # Unnecessary `pass` statement
  "EM101",    # Exception must not use a string literal
  "RET504",   # Unnecessary assignment before `return`
  "BLE001",   # Do not catch blind exception
  "RUF005",   # Iterable unpacking instead of concatenation
  "PLC0415",  # `import` should be at the top-level of a file
  "UP032",    # Use f-string instead of `format` call
  "PLR2004",  # Magic value used in comparison
  "Q000",     # Mutable class attributes should be annotated
  "C901",     # complex-structure
  "I",        # isort
  "N",        # pep8-naming
  "D",        # pydocstyle
  "ANN",      # flake8-annotations
  "S",        # flake8-bandit
  "FBT",      # flake8-boolean-trap
  "CPY",      # flake8-copyright
  "T20",      # flake8-print
  "TCH",      # flake8-type-checking
  "TD",       # flake8-todos
  "FIX",      # flake8-fixme
  "ERA",      # eradicate
  "ISC",      # flake8-implicit-str-concat
  "PLR6301",  # Method could be a function, class method, or static method
  "SIM108",   # Use ternary operator
  "RUF012",   # Mutable class attributes should be annotated
  "FURB101",  # `open` and `read` should be replaced
  "EM103",    # Exception must not use a `.format()` string directly
  "B019",     # Use of `functools.lru_cache` on methods can lead to memory leaks
  "DTZ005",   # Use of `datetime.datetime.now()` without `tz`
  "PTH",      # flake8-use-pathlib
  "PERF203",  # `try`-`except` within a loop
  "T10",      # flake8-debugger
  "C408",     # Rewrite as a literal
  "COM812",   # Trailing comma missing
  "PYI021",   # Docstrings should not be included in stubs
  "PERF401",  # Use a list comprehension
#    # E,S,SIM,ARG,T,ISC003,PLR6301
]
## SCRIV

[tool.scriv]
# Changelog management: https://pypi.org/project/scriv/
format = "rst"
output_file = "CHANGES.rst"
insert_marker = "scriv-start-here"
end_marker = "scriv-end-here"
ghrel_template = "file: ci/ghrel_template.md.j2"
