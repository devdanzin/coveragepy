# Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0
# For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

## MYPY

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

exclude = """(?x)(
    ^tests/.*_plugin\\.py$           # not part of our test suite.
    )"""

## PYLINT

[tool.pylint.basic]
no-docstring-rgx = "__.*__|test[A-Z_].*|setUp|_decorator|_wrapper|_.*__.*"

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
    "__post_init__",
    "setUp",
    "reset",
    "_reset",
]

[tool.pylint.design]
max-args = 15
max-attributes = 40
max-bool-expr = 5
max-branches = 50
max-locals = 50
max-parents = 12
max-public-methods = 500
max-returns = 20
max-statements = 150
min-public-methods = 0

[tool.pylint.main]
extension-pkg-whitelist = ["greenlet"]

[tool.pylint."messages control"]
enable = [
    "useless-suppression",
]

disable = [
    "spelling",
    # Messages that are just silly:
    "locally-disabled",
    "exec-used",
    "global-statement",
    "broad-except",
    "no-else-return",
    "subprocess-run-check",
    "use-dict-literal",
    # Messages that may be silly:
    "no-member",
    "using-constant-test",
    "too-many-nested-blocks",
    "too-many-ancestors",
    "unnecessary-pass",
    "no-else-break",
    "no-else-continue",
    # Questionable things, but it's ok, I don't need to be told:
    "import-outside-toplevel",
    "self-assigning-variable",
    "consider-using-with",
    "missing-timeout",
    "too-many-lines",
    "use-implicit-booleaness-not-comparison",
    # Formatting stuff
    "superfluous-parens",
    # Messages that are noisy for now, eventually maybe we'll turn them on:
    "invalid-name",
    "protected-access",
    "unspecified-encoding",
    "consider-using-f-string",
    "duplicate-code",
    "cyclic-import",
]

[tool.pylint.reports]
score = false

[tool.pylint.variables]
dummy-variables-rgx = "_|unused|.*_unused"
ignored-argument-names = "_|unused|.*_unused"

## PYTEST

[tool.pytest.ini_options]
addopts = "-q -n auto -p no:legacypath --strict-markers --no-flaky-report -rfEX --failed-first"
python_classes = "*Test"
markers = [
    "expensive: too slow to run during \"make smoke\"",
]

# How come these warnings are suppressed successfully here, but not in conftest.py??
filterwarnings = [
    # Sample 'ignore':
    #"ignore:the imp module is deprecated in favour of importlib:DeprecationWarning",

    ## Pytest warns if it can't collect things that seem to be tests. This should be an error.
    "error::pytest.PytestCollectionWarning",
]

# xfail tests that pass should fail the test suite
xfail_strict = true

# https://docs.pytest.org/en/stable/reference/reference.html#confval-verbosity_assertions
verbosity_assertions = 5

balanced_clumps = [
    # Because of expensive session-scoped fixture:
    "VirtualenvTest",
    # Because of shared-file manipulations (~/tests/actual/testing):
    "CompareTest",
    # No idea why this one fails if run on separate workers:
    "GetZipBytesTest",
]

## RUFF
# We aren't using ruff for real yet...

[tool.ruff]
target-version = "py38"     # Can't use [project]
line-length = 130

[tool.ruff.lint.pylint]
max-args = 15
#max-attributes = 40
max-bool-expr = 5
max-branches = 50
max-locals = 50
#max-parents = 12
max-public-methods = 500
max-returns = 20
max-statements = 150
#min-public-methods = 0
max-nested-blocks = 7

[tool.ruff.lint]
select = ["ALL"]
dummy-variable-rgx = "_|unused|.*_unused"

ignore = [
  "A001",     # Variable is shadowing a Python builtin
  "A002",     # Argument is shadowing a Python builtin
  "ANN",      # flake8-annotations
  "ANN101",   # Missing type annotation for `self` in method
  "ARG005",   # Unused lambda argument
  "B011",     # Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
  "B019",     # Use of `functools.lru_cache` on methods can lead to memory leaks
  "B023",     # Function definition does not bind loop variable
  "B028",     # No explicit `stacklevel` keyword argument found
  "BLE001",   # Do not catch blind exception
  "C408",     # Rewrite as a literal
  "C901",     # complex-structure
  "COM812",   # Trailing comma missing
  "CPY",      # flake8-copyright
  "D",        # pydocstyle
  "DTZ001",   # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
  "DTZ005",   # Use of `datetime.datetime.now()` without `tz`
  "DTZ007",   # The use of `datetime.datetime.strptime()` without %z must be followed by `.replace(tzinfo=)` or `.astimezone()`
  "E201",     # Whitespace after '{'
  "E202",     # Whitespace before '}'
  "E225",     # Missing whitespace around operator
  "E226",     # Missing whitespace around arithmetic operator
  "E228",     # Missing whitespace around modulo operator
  "E231",     # Missing whitespace after ':'
  "E241",     # Multiple spaces after comma
  "E251",     # Unexpected spaces around keyword / parameter equals
  "E261",     # Insert at least two spaces before an inline comment
  "E262",     # Inline comment should start with `# `
  "E265",     # Block comment should start with `# `
  "E266",     # Too many leading `#` before block comment
  "E275",     # Missing whitespace after keyword
  "E301",     # Expected 1 blank line, found 0
  "E302",     # Expected 2 blank lines, found 1
  "E303",     # Too many blank lines
  "E305",     # Expected 2 blank lines after class or function definition, found (1)
  "E306",     # Expected 1 blank line before a nested definition, found 0
  "E722",     # Do not use bare `except`
  "E741",     # Ambiguous variable name
  "EM101",    # Exception must not use a string literal
  "EM102",    # Exception must not use an f-string
  "EM103",    # Exception must not use a `.format()` string directly
  "ERA",      # eradicate
  "ERA001",   # Found commented-out code
  "FBT",      # flake8-boolean-trap
  "FIX",      # flake8-fixme
  "FLY002",   # Consider f-string instead of string join
  "FURB101",  # `open` and `read` should be replaced
  "FURB103",  # `open` and `write` should be replaced by `Path(...)....`
  "FURB113",  # Use `.extend(...)` instead of repeatedly calling `.append()`
  "FURB118",  # Use `operator.itemgetter(1)` instead of defining a lambda
  "FURB131",  # Prefer `clear` over deleting a full slice
  "FURB140",  # Use `itertools.starmap` instead of the generator
  "FURB142",  # Use of `set.add()` in a for loop
  "FURB145",  # Prefer `copy` method over slicing
  "I",        # isort
  "INP001",   # File is part of an implicit namespace package. Add an `__init__.py`.
  "ISC",      # flake8-implicit-str-concat
  "N",        # pep8-naming
  "PD011",    # Use `.to_numpy()` instead of `.values`
  "PERF203",  # `try`-`except` within a loop
  "PERF401",  # Use a list comprehension
  "PGH003",   # Use specific rule codes when ignoring type issues
  "PIE790",   # Unnecessary `pass` statement
  "PLC0415",  # `import` should be at the top-level of a file
  "PLC1901",  # `variable == ""` can be simplified to `not variable` as an empty string is falsey
  "PLC2701",  # Private name import
  "PLR1714",  # Consider merging multiple comparisons: `e2 in ("python", e1)`. Use a `set` if the elements are hashable.
  "PLR2004",  # Magic value used in comparison
  "PLR5501",  # Use `elif` instead of `else` then `if`, to reduce indentation
  "PLR6104",  # Use `+=` to perform an augmented assignment directly
  "PLR6201",  # Use a `set` literal when testing for membership
  "PLR6301",  # Method could be a function, class method, or static method
  "PLW0127",  # self-assigning-variable
  "PLW0603",  # global-statement
  "PLW1510",  # `subprocess.run` without explicit `check` argument
  "PLW1514",  # unspecified-encoding
  "PLW2901",  # `for` loop variable overwritten by assignment target
  "PT004",    # Fixture `clean_up` does not return anything, add leading underscore
  "PT006",    # Wrong name(s) type in `@pytest.mark.parametrize`
  "PT008",    # Use `return_value=` instead of patching with `lambda`
  "PT011",    # `pytest.raises(OSError)` is too broad, set the `match` parameter or use a more specific exception
  "PT012",    # `pytest.raises()` block should contain a single simple statement
  "PT015",    # Assertion always fails, replace with `pytest.fail()`
  "PT017",    # Found assertion on exception in `except` block, use `pytest.raises()` instead
  "PT018",    # Assertion should be broken down into multiple parts
  "PT022",    # No teardown in fixture, use `return` instead of `yield`
  "PT023",    # Use `@pytest.mark.expensive()` over `@pytest.mark.expensive`
  "PTH",      # flake8-use-pathlib
  "PTH123",   # `open()` should be replaced by `Path.open()`
  "PYI021",   # Docstrings should not be included in stubs
  "PYI032",   # Prefer `object` to `Any` for the second parameter to `__eq__`
  "PYI034",   # `__enter__` methods in context managers usually return `self` at runtime
  "Q000",     # Mutable class attributes should be annotated
  "Q001",     # Single quote multiline found but double quotes preferred
  "Q003",     # Change outer quotes to avoid escaping inner quotes
  "RET504",   # Unnecessary assignment before `return`
  "RET505",   # Unnecessary `elif` after `return`
  "RET507",   # Unnecessary `elif` after `continue` statement
  "RSE102",   # Unnecessary parentheses on raised exception
  "RUF005",   # Iterable unpacking instead of concatenation
  "RUF012",   # Mutable class attributes should be annotated
  "RUF015",   # Prefer `next(iter(summary.keys()))` over single element slice
  "RUF024",   # Do not pass mutable objects as values to `dict.fromkeys`
  "S",        # flake8-bandit
  "SIM102",   # Use a single `if` statement instead of nested `if` statements
  "SIM103",   # Return the condition directly
  "SIM105",   # Use `contextlib.suppress(ImportError)` instead of `try`-`except`-`pass`
  "SIM108",   # Use ternary operator
  "SIM114",   # Combine `if` branches using logical `or` operator
  "SIM115",   # Use context handler for opening files
  "SIM117",   # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "SIM118",   # Use `key in dict` instead of `key in dict.keys()`
  "SIM300",   # Yoda conditions are discouraged
  "SLF001",   # Private member accessed
  "T10",      # flake8-debugger
  "T20",      # flake8-print
  "TCH",      # flake8-type-checking
  "TD",       # flake8-todos
  "TRY003",   # Long messages outside the exception class
  "TRY300",   # Consider moving this statement to an `else` block
  "TRY301",   # Abstract `raise` to an inner function
  "TRY302",   # Remove exception handler; error is immediately re-raised
  "UP006",    # Use `list` instead of `List` for type annotation
  "UP007",    # Use `X | Y` for type annotations
  "UP011",    # Unnecessary parentheses
  "UP031",    #  Use format specifiers instead of percent format
  "UP032",    # Use f-string instead of `format` call
  "YTT201",   # `sys.version_info[0] == 3` referenced (python4), use `>=`
]

## SCRIV

[tool.scriv]
# Changelog management: https://pypi.org/project/scriv/
format = "rst"
output_file = "CHANGES.rst"
insert_marker = "scriv-start-here"
end_marker = "scriv-end-here"
ghrel_template = "file: ci/ghrel_template.md.j2"
